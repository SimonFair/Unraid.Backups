Menu="BackupsDetail:1"
Title="$name _(Details)_"
Tag="hdd-o"
---
<?PHP
/* Copyright 2005-2024, Lime Technology
 * Copyright 2012-2024, Bergware International.
 * Copyright 2012-2024, SimonFair
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License verssion 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
require_once "$docroot/webGui/include/Preselect.php";





function sanitize(&$val) {
  $data = explode('.',str_replace([' ',','],['','.'],$val));
  $last = array_pop($data);
  $val = count($data) ? implode($data).".$last" : $last;
  $val = preg_replace('/[^0-9.]/','',$val);
}
function presetSpace($val) {
  global $disk,$display;
  if (!$val or strcasecmp($val,'NaN')==0) return;
  sanitize($val);
  $size = _var($disk,'fsSize',0);
  $size = $size>0 ? round(100*$val/$size,1) : 0;
  $units = ['KB','MB','GB','TB','PB','EB','ZB','YB'];
  $base = $val>0 ? floor(log($val,1000)) : 0;
  $size = round($val/pow(1000,$base),1);
  $unit = _var($units,$base);
  [$dot,$comma] = str_split(_var($display,'number','.,'));
  return $size>0 ? number_format($size,$size-floor($size)?1:0,$dot,$comma).' '.$unit : '';
}
function fsSize() {
  global $disks,$pools;
  $fsSize = [];
  foreach ($pools as $pool) $fsSize[] = '"'.$pool.'":"'._var($disks[$pool],'fsSize',0).'"';
  return implode(',',$fsSize);
}
function fsType($type) {
  global $disk;
  return strpos(_var($disk,'fsType'),$type)!==false;
}
function diskStatus($status) {
  global $disk;
  return strpos(_var($disk,'status'),$status)!==false;
}
function diskType(...$types) {
  global $disk;
  $pass = false;
  foreach ($types as $type) $pass |= _var($disk,'type')==$type;
  return $pass;
}
function makeList($list) {
  return implode(',',array_map('escapestring',$list));
}
function sharename($share) {
  return basename($share,'.cfg');
}
function makeTemp(&$disk, $zone) {
  global $display;
  switch ($zone) {
    case 'hot': $nvme = 'wctemp'; break;
    case 'max': $nvme = 'cctemp'; break;
  }
  return _var($disk,'transport')=='nvme' ? get_nvme_info(_var($disk,'device'),$nvme) : (_var($disk,'rotational',1)==0 && $display["{$zone}ssd"]>=0 ? $display["{$zone}ssd"] : $display[$zone]);
}
function maintenance_mode() {
  global $var;
  return _var($var,'fsState')=="Started" && _var($var,'startMode')=="Maintenance" && _var($disk,'luksState',0)<=1;
}
function isPool($name) {
  global $pools;
  return in_array($name,$pools);
}
$backuparray = json_decode(file_get_contents("/boot/config/plugins/Unraid.Backups/backups.json"),true);
$backup = $backuparray[$name];

?>
<link type="text/css" rel="stylesheet" href="<?autov("/webGui/styles/jquery.ui.css")?>">
<link type="text/css" rel="stylesheet" href="<?autov("/plugins/dynamix.docker.manager/styles/style-$theme.css")?>">



<script>
String.prototype.celsius = function(){return Math.round((parseInt(this)-32)*5/9).toString();}

if ($.cookie('deletepool')) {
  $.removeCookie('deletepool');
  done();
}
function setFloor() {
  if ($('#shareFloor').length==0) return;
  const fsSize = {<?=fsSize()?>};
  const units = ['K','M','G','T','P','E','Z','Y'];
  var val  = $('#shareFloor').val();
  var full = fsSize["<?=$tag?>"];
  var size = parseInt(full * 0.1); // 10% of available size
  var number = val.replace(/[A-Z%\s]/gi,'').replace(',','.').split('.');
  var last = number.pop();
  number = number.length ? number.join('')+'.'+last : last;
  if (number==0 && size>0) {
    size = size.toString();
    $.cookie('autosize-<?=$tag?>','1',{expires:365});
  } else {
    size = val;
    $.removeCookie('autosize-<?=$tag?>');
  }
  var unit = size.replace(/[0-9.,\s]/g,'');
  if (unit=='%') {
    number = (number > 0 && number <= 100) ? parseInt(full * number / 100) : '';
  } else {
    var base = unit.length==2 ? 1000 : (unit.length==1 ? 1024 : 0);
    number = base>0 ? number * Math.pow(base,(units.indexOf(unit.toUpperCase().replace('B',''))||0)) : size;
  }
  $('#shareFloor').val(isNaN(number) ? '' : number);
}


function selectDiskFsWidth() {
  var num_slots = <?=_var($disk,'slots',0)?>;
  var selected_width = <?=_var($disk,'fsWidth',0)?>;
  $('#diskFsWidthZFS').empty();
  if (num_slots == 0) {
    $('#diskFsWidthZFS').prop('disabled',true).append($('<option>', {
      value: 0,
      text: "<?=_('no devices')?>"
    }));
  } else if ($('#diskFsProfileZFS').val() == '') {
    var label = (num_slots == 1) ? "device" : "devices";
    $('#diskFsWidthZFS').append($('<option>', {
      value: 1,
      text: _(sprintf('%s '+label,num_slots))
    }));
  } else if ($('#diskFsProfileZFS').val() == 'mirror') {
    var width;
    for (width=2; width<=Math.min(num_slots,4); width++) {
      if ((num_slots % width) == 0) {
        var groups = num_slots / width;
        var label = (groups == 1) ? "group" : "groups";
        $('#diskFsWidthZFS').append($('<option>', {
          value: width,
          text: _(sprintf('%s '+label+' of %s devices',groups,width)),
          selected: (width == selected_width)
        }));
      }
    }
  } else {
    var width, min_width;
    if ($('#diskFsProfileZFS').val() == 'raidz1') min_width = 3;
    else if ($('#diskFsProfileZFS').val() == 'raidz2') min_width = 3;
    else if ($('#diskFsProfileZFS').val() == 'raidz3') min_width = 4;
    for (width=min_width; width<=num_slots; width++) {
      if ((num_slots % width) == 0) {
        var groups = num_slots / width;
        var label = (groups == 1) ? "group" : "groups";
        $('#diskFsWidthZFS').append($('<option>', {
          value: width,
          text: _(sprintf('%s '+label+' of %s devices',groups,width)),
          selected: (width == selected_width)
        }));
      }
    }
  }
}

function updateMode(form,mode) {
  $(form).find('input[name="#arg[3]"]').val(mode);
}
function validate(poolname) {
  var valid = /^[a-z_]([a-z0-9~._-]*[a-z_])*$/;
  var reserved = [<?=makeList(explode(',',_var($var,'reservedNames')))?>];
  var shares = [<?=makeList(array_map('sharename',glob('boot/config/shares/*.cfg',GLOB_NOSORT)))?>];
  var pools = [<?=makeList($pools)?>];
  if (!poolname.trim()) return false;
  if (reserved.includes(poolname)) {
    swal({title:"_(Invalid pool name)_",text:"_(Do not use reserved names)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});
    return false;
  } else if (shares.includes(poolname)) {
    swal({title:"_(Invalid pool name)_",text:"_(Do not use user share names)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});
    return false;
  } else if (pools.includes(poolname)) {
    swal({title:"_(Invalid pool name)_",text:"_(Pool name already exists)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});
    return false;
  } else if (!valid.test(poolname)) {
    swal({title:"_(Invalid pool name)_",text:"_(Use only lowercase with no special characters or leading/trailing digits)_",type:'error',html:true,confirmButtonText:"_(Ok)_"});
    return false;
  }
  return true;
}
function dialogStyle() {
  $('.ui-dialog-titlebar-close').css({'display':'none'});
  $('.ui-dialog-title').css({'text-align':'center','width':'100%','font-size':'1.8rem'});
  $('.ui-dialog-content').css({'padding-top':'15px','vertical-align':'bottom'});
  $('.ui-button-text').css({'padding':'0px 5px'});
}
function renamePoolPopup() {
  var popup = $('#dialogRenamePool');
  // Load popup with the template info
  popup.html($("#templatePopupPool").html());
  // Start Dialog section
  popup.dialog({
    title: "_(Rename Pool)_",
    height: 'auto',
    width: 600,
    resizable: false,
    modal: true,
    buttons: {
    "_(Rename)_": function() {
        if (validate($(this).find('input[name="poolName"]').val())) {
          $(this).find('form').submit();
          $(this).dialog('close');
        }
      },
    "_(Cancel)_": function() {
        $(this).dialog('close');
      }
    }
  });
  dialogStyle();
}
function deletePool() {
  $.cookie('deletepool','deletepool');
  document.deletepool.submit();
}
function eraseDisk(name) {
  swal({
    title:"_(Erase Device Content)_?",
    text:"<?=$text?><p style='font-weight:bold;color:red;margin:8px 0'>_(Existing content is permanently lost)_</p>",
    html:true,
    type:'input',
    inputPlaceholder:"<?=sprintf(_('To confirm your action type: %s'),$name)?>",
    showCancelButton:true,
    closeOnConfirm:false,
    confirmButtonText:"_(Proceed)_",
    cancelButtonText:"_(Cancel)_"
  },
  function(confirm){
    if (confirm == "<?=$name?>") {
      swal.close();
      $('#doneButton').prop('disabled',true);
      $('#eraseButton').prop('disabled',true);
      $('div.spinner.fixed').show();
      $.get("/update.htm",{cmdWipefs:name,csrf_token:"<?=_var($var,'csrf_token')?>"},function(){
        $('div.spinner.fixed').hide();
        refresh();
      });
    } else {
      if (confirm.length) swal({title:"_(Incorrect confirmation)_",text:"_(Please try again)_!",type:'error',html:true,confirmButtonText:"_(Ok)_"});
    }
  });
}
</script>

<form markdown="1" method="POST" action="/update.htm" target="progressFrame" onsubmit="setFloor()">
<?if (_var($var,'fsState')=="Stopped" && isPool($name) && !isSubpool($name)):?>
_(Name)_:
: <a onclick="renamePoolPopup()" style="cursor:pointer" title="_(Rename Pool)_"><?=$name?></a>

<?else:?>
_(Name)_:
: <?=_(my_disk(native($name)),3)?>

<?endif;?>


_(Comments)_:
: <input type="text" name="diskComment.<?=_var($disk,'idx',0)?>" maxlength="256" value="<?=htmlspecialchars(_var($disk,'comment'))?>">

:info_comments_help:

_(Source)_:
: <input type="text" name="source" maxlength="256" value="<?=htmlspecialchars(_var($backup['source']))?>">

_(Destination)_:
: <input type="text" name="destination" maxlength="256" value="<?=htmlspecialchars(_var($backup['destination']))?>">

_(Enabled)_:
: <input type="text" name="enabled" maxlength="256" value="<?=htmlspecialchars(_var($backup['enabled']) ? "Yes" : "No")?>">

_(Progress)_:
: <input type="text" name="progress" maxlength="256" value="<?=htmlspecialchars(_var($backup['progress']))?>">

_(Next Run)_:
: <input type="text" name="nextrun" maxlength="256" value="<?=htmlspecialchars(_var($backup['nextrun']))?>">

&nbsp;
: <input type="submit" name="changeDisk" value="_(Apply)_" disabled><input type="button" id="doneButton" value="_(Done)_" onclick="done()">
  <?$erasable=false?>
  <?if (diskType('Parity','Data')):?>
    <?if (_var($var,'fsState')=="Stopped" && diskStatus('_NEW')): $erasable=true; endif;?>
    <?if (_var($var,'fsState')=="Started" && _var($var,'startMode')!="Normal" && diskType('Data')): $erasable=true; endif;?>
    <input type="button" id="eraseButton" value="_(Erase)_" onclick="eraseDisk('<?=$name?>')"<?=$erasable?'':' disabled'?>>
  <?endif;?>
  <?if (isPool($name) && strpos($name,$_tilde_)===false):?>
    <?if (_var($var,'fsState')=="Stopped" || (_var($var,'fsState')=="Started" && _var($var,'startMode')!="Normal")): $erasable=true; endif;?>
    <input type="button" id="eraseButton" value="_(Erase)_" onclick="eraseDisk('<?=$name?>')"<?=$erasable?'':' disabled'?>>
  <?endif;?>
  <?if (_var($var,'fsState')=="Stopped" && isPool($name)):?>
    <?$empty = _var($disk,'devices',0)==0?>
    <input type="button" value="_(Delete Pool)_" onclick="deletePool()"<?=$empty?'':' disabled'?>><?if (!$empty):?>_(Unassign **ALL** devices to delete this pool)_<?endif;?>
  <?endif;?>
</form>



<div id="dialogRenamePool" style="display:none"></div>

<div id="templatePopupPool" style="display:none">
<form markdown="1" method="POST" action="/update.htm" target="progressFrame" onsubmit="return validate(this.poolName.value)">
<input type="hidden" name="poolNameOrig" value="<?=$name?>">
<input type="hidden" name="changeSlots" value="apply">
_(Name)_:
: <input type="text" name="poolName" maxlength="40" value="<?=$name?>">

</form>
</div>




